" Plugins{{{
call plug#begin('~/vimfiles/plugged')
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }
call plug#end()
"}}}

" Functions{{{
" Change font size
function! Fontsize()
	if &guifont ==? "Consolas:h14"
		set guifont=Consolas:h16
	elseif &guifont ==? "Consolas:h16"
		set guifont=Consolas:h18
	else
		set guifont=Consolas:h14
	endif
endfunction

" Change color scheme
function! Background()
	if &background ==? "light"
		set background=dark
	else
		set background=light
	endif
endfunction

" Open links in a web browser
function! Openurl()
	let s:link = matchstr(getline("."), '[a-z]*:\/\/[^ >,;]*\|www.[a-z.]*[^ >,;]*')
	if s:link != ""
		execute "!\"c:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe\"" s:link
	endif
endfunction

" Map n and p for spellchecking when a spelllanguage is set
function! Spellmap(lang)
	nnoremap n ]sz=
	nnoremap p [sz=
	set spell
	if a:lang ==? "sv"
		set spelllang=sv
	elseif a:lang ==? "en_us"
		set spelllang=en_us
	else
		set nospell
		unmap n
		unmap p
	endif
endfunction

" Toogle regular movment in vim
function! Wraping()
	if &wrap ==? "nowrap" || &linebreak ==? "nolinebreak"
		set wrap linebreak
	else
		set nowrap nolinebreak
	endif
endfunction

" Pasting
function! Paste()
	if col(".") == 1
		normal "+Pa
	else
		normal "+pa
	endif
endfunction
"}}}

" Settings{{{
" Color scheme
colorscheme solarized8
if strftime('%H') < 18 && strftime('%H') > 9
	set background=light
endif

" Searching
set hlsearch ignorecase incsearch

" Font size
set guifont=Consolas:h14

" Lines
set number relativenumber ruler cursorline

" Matches using command-line completion
set wildmenu

" Open splits at the bottom and right
set splitbelow splitright

" Text wrapping
set nowrap

" Allow backspacing over indentation, line breaks and the start of insert
set backspace=indent,eol,start

" Enable mouse for normal, visual and command-line modes
set mouse=nvc

" Disable error sounds and flashing
autocmd GUIEnter * set visualbell t_vb=

" Folding
set foldmethod=marker

" indentation
set smartindent

" Key timeout
set notimeout
"}}}

" Keybindings{{{
" Leader mappings
let mapleader=" "
nnoremap <leader>b :call Background()<cr>
nnoremap <leader>f :call Fontsize()<cr>
nnoremap <leader>w :call Wraping()<cr>
nnoremap <leader>en :call Spellmap("en_us")<cr>
nnoremap <leader>sv :call Spellmap("sv")<cr>
nnoremap <leader>l :call Spellmap("")<cr>
nnoremap <leader>u :call Openurl()<cr>
nnoremap <leader>n :noh<cr>

" Other mappings
nnoremap k gk
nnoremap j gj
vnoremap <c-c> "+y
inoremap <c-v> <esc>:call Paste()<cr>
nnoremap <c-a> ggVG
inoremap <c-x> <Esc>/<++><cr>"_c4l
nnoremap <c-x> /<++><cr>"_c4l

" Disable keys
noremap <pageup> <nop>
noremap <pagedown> <nop>
noremap <up> <nop>
noremap <down> <nop>
noremap <left> <nop>
noremap <right> <nop>
nnoremap <s-q> <nop>
nnoremap <space> <nop>
inoremap § <nop>
inoremap <del> <nop>
"}}}

" Markdown{{{
" Compile to docx
function! Compilemarkdown()
	set fileencoding=utf-8
	write
	!pandoc.exe % -o \%HOMEPATH\%\Desktop\tmp.docx
	set fileencoding=latin1
	write
endfunction

" autocmd Filetype markdown inoremap ;1 <Esc>?^#<cr>yy<c-o>P$ciw<c-r>=<c-r>"+1<cr><down>$$<cr><cr><++><up><up><left>
" autocmd Filetype markdown inoremap ;2 <Esc>?^#<cr>yy<c-o>P$ciw<c-r>=<c-r>"+1<cr><cr>a) <cr>b) $<++>$<cr>c) $<++>$<cr><down><++><Esc>?^a)<cr>A$$<left>
autocmd Filetype markdown nnoremap <leader>c :call Compilemarkdown()<cr>
" autocmd Filetype markdown call Wraping()
"}}}
